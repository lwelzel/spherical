[project]
name = "spherical"
authors = [{name = "Matthias Samland", email = "m.samland@mailbox.org"}]
description = "VLT/SPHERE Instrument Calibration Pipeline and Database"
readme = "README.rst"
license = { file = 'LICENSE' }
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
]
requires-python = ">=3.10, <3.14"
dependencies = [
    "dill",
    "numpy>=1.22,<=2.2",
    "scipy>=1.9.3",
    "matplotlib",
    "pandas",
    "scikit-image",
    "astropy>=6.0",
    "astroquery>=0.4.7",
    "photutils",
    "tqdm",
    "natsort",
    "healpy",
    "bs4",
    "seaborn",
]
dynamic = ['version']

[project.optional-dependencies]
docs = [
    "sphinx",
    "sphinx-automodapi",
    "numpydoc",
]

pipeline = [
    "charis@git+https://github.com/PrincetonUniversity/charis-dep@devel",
    "trap@git+https://github.com/m-samland/trap@packaging",
]

test = [
    "pytest",
    "pytest-cov",
    "pytest-doctestplus",
    "flake8",
    "flake8-pyproject",
    "codecov",
    "ruff",
]

notebook = [
    "ipython",
    "notebook",
    "ipywidgets",
    "ipympl",
]

[project.urls]
"Bug Tracker" = "https://github.com/m-samland/spherical/issues"
"Source Code" = "https://github.com/m-samland/spherical"


[build-system]
requires = [
    "setuptools>=60",
    "setuptools_scm>=8.0",
    "wheel",
]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
write_to = "src/spherical/_version.py"

[tool.setuptools.packages.find]
where = ["src"]

[tool.flake8]
max-line-length = 130
exclude = [
    'docs',
    '.tox',
    '.eggs',
    'build',
    '*_version.py',
]

[tool.ruff]
line-length = 127
target-version = "py312"
exclude = [
    'docs',
    '*_version.py',
]

[tool.ruff.lint]
# Enable Ruff rulesets you like (equivalent to Flake8 + isort, etc.)
select = ["E", "F", "I"]  # E/F = Flake8 rules, I = isort rules, C90 = McCabe complexity, D = docstrings
ignore = ["E203", "E501", "E712", "E722", "D100", "D104"] # ignore specific rules (customize as needed)

[tool.ruff.lint.pydocstyle]
convention = "google"

# Ignore specific docstring rules in test files
[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D100", "D101", "D102", "D103", "D104", "D105", "D107"]

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 5.
max-complexity = 10

[tool.ruff.format]
quote-style = "double"  # to match Black formatting
indent-style = "space"

[tool.coverage.run]
omit = [
    "_version.py",
]